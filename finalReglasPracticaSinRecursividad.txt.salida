S -> { int double main }
Sp -> { int double epsilon }
Funcion -> { int double }
Tipo -> { int double }
Bloque -> { llavei }
SecInstr -> { int double id llavei epsilon }
V -> { int double }
Var -> { id }
Array -> { cori epsilon }
MV -> { coma pyc }
Instr -> { id llavei }
Expr -> { real entero id }
Expr' -> { addop epsilon }
Term -> { real entero id }
Term' -> { mulop epsilon }
Factor -> { real entero id }

S -> { $ }
Sp -> { main }
Funcion -> { int double main }
Tipo -> { id }
Bloque -> { $ int double main id llavei llaved }
SecInstr -> { llaved }
V -> { int double id llavei llaved }
Var -> { coma pyc }
Array -> { coma pyc }
MV -> { int double id llavei llaved }
Instr -> { int double id llavei llaved }
Expr -> { pyc }
Expr' -> { pyc }
Term -> { addop pyc }
Term' -> { addop pyc }
Factor -> { mulop addop pyc }

S -> Sp main pari pard Bloque 			{ int double main }
Sp -> Funcion Sp 				{ int double }
Sp -> epsilon 					{ main }
Funcion -> Tipo id pari pard Bloque 		{ int double }
Tipo -> int 					{ int }
Tipo -> double 					{ double }
Bloque -> llavei SecInstr llaved 		{ llavei }
SecInstr -> V SecInstr 				{ int double }
SecInstr -> Instr SecInstr 			{ id llavei }
SecInstr -> epsilon 				{ llaved }
V -> Tipo Var MV 				{ int double }
Var -> id Array 				{ id }
Array -> cori entero cord Array 		{ cori }
Array -> epsilon 				{ coma pyc }
MV -> coma Var MV 				{ coma }
MV -> pyc 					{ pyc }
Instr -> id asig Expr pyc 			{ id }
Instr -> Bloque 				{ llavei }
Expr -> Term Expr' 				{ real entero id }
Expr' -> addop Term Expr' 			{ addop }
Expr' -> epsilon 				{ pyc }
Term -> Factor Term' 				{ real entero id }
Term' -> mulop Factor Term' 			{ mulop }
Term' -> epsilon 				{ addop pyc }
Factor -> real 					{ real }
Factor -> entero 				{ entero }
Factor -> id 					{ id }
